root.class_uid = 3002
root.class_name = "Authentication"
root.category_uid = 3
root.category_name = "Identity & Access Management Category"
root.cloud.provider = "AWS"
root.cloud.region = this.awsRegion
root.severity_id = 1
root.severity = "Informational"

root.activity_id = match {
        this.eventName == "ConsoleLogin" => 1
        this.eventName == "ExternalIdPDirectoryLogin" => 1
        this.eventName == "UserAuthentication" => 1
        this.eventName.contains("AssumeRole") => 1
        _ => 99
    }
root.activity_name = match {
        this.eventName == "ConsoleLogin" => "Logon"
        this.eventName == "ExternalIdPDirectoryLogin" => "Logon"
        this.eventName.contains("AssumeRole") => "Logon"
        _ => "Other"
    }
    
root.actor.user.account.uid = this.userIdentity.accountId
root.actor.user.credential_uid = this.userIdentity.accessKeyId
root.actor.user.name = if this.userIdentity.exists("userName") {this.userIdentity.userName} else {deleted()}
root.actor.user.type = this.userIdentity.type
root.actor.user.uid = this.userIdentity.arn
root.actor.user.uid_alt = this.userIdentity.principalId

root.actor.session.created_time = match {
    this.userIdentity.sessionContext.attributes.creationDate == null => 0
    _=> this.userIdentity.sessionContext.attributes.creationDate.ts_unix_milli()
}
root.actor.session.created_time_dt = match {
    this.userIdentity.sessionContext.attributes.creationDate == null => 0
    _=> this.userIdentity.sessionContext.attributes.creationDate
}
root.actor.session.issuer = this.userIdentity.sessionContext.sessionIssuer.arn
root.actor.invoked_by = this.userIdentity.invokedBy
root.actor.idp.name = this.userIdentity.(sessionContext.webIdFederationData.federatedProvider|identityProvider) 

root.api.request.uid = this.requestID
root.api.service.name = this.eventSource
root.api.version = this.apiVersion
root.api.operation = this.eventName
root.api.response.error = this.errorCode
root.api.response.message = this.errorMessage
root.api.request.data = this.requestParameters
root.api.response.data = this.responseElements

root.cloud.provider = "AWS"
root.cloud.region = this.awsRegion

root.dst_endpoint.svc_name = this.additionalEventData.LoginTo

root.http_request.user_agent = this.userAgent

root.is_mfa = match this.additionalEventData.MFAUsed {
        "No" => false
        "Yes" => true
    }
root.metadata.log_provider = "CloudTrail"
#root.metadata.log_name = this.eventName check with AWS on this 
root.metadata.event_code = this.eventType
root.metadata.product.version = this.eventVersion
root.metadata.product.feature.name = this.eventCategory|"Management, Data, and Insights"
root.metadata.uid = this.eventID
root.metadata.product.name = "CloudTrail"
root.metadata.product.vendor_name = "AWS"
root.metadata.version = "1.1.0"
root.metadata.product.feature.name = this.eventCategory 
root.metadata.profiles = ["cloud","datetime"]

root.src_endpoint.uid = this.vpcEndpointId
root.src_endpoint.ip = this.sourceIPAddress

root.status_id = match this.responseElements.ConsoleLogin {
        "Unknown" => 0
	    "Success" => 1
	    "Failure" => 2
	    "Other" => 99
    }
root.status = this.responseElements.ConsoleLogin

root.time = this.eventTime.ts_unix_milli()
root.time_dt = this.eventTime

root.user.uid = this.userIdentity.principalId
root.user.name = match {
    this.requestParameters.exists("roleSessionName") => this.requestParameters.roleSessionName
    this.userIdentity.exists("arn") => userIdentity.arn.split("/").index(-1)
    _=> "Unknown"
}
root.user.uid_alt = this.userIdentity.principalId

root.unmapped = this.without(
    "awsRegion",
    "eventName",
    "userIdentity.accountId",
    "userIdentity.accessKeyId",
    "userIdentity.userName",
    "userIdentity.type",
    "userIdentity.principalId",
    "userIdentity.arn",
    "userIdentity.sessionContext.attributes.creationDate",
    "userIdentity.sessionContext.sessionIssuer.arn",
    "userIdentity.invokedBy",
    "userIdentity.webIdFederationData.federatedProvider",
    "userIdentity.identityProvider",
    "requestID",
    "eventSource",
    "apiVersion",
    "errorCode",
    "errorMessage",
    "eventVersion",
    "eventID",
    "eventCategory",
    "additionalEventData.MFAUsed",
    "vpcEndpointId",
    "sourceIPAddress",
    "responseElements.ConsoleLogin",
    "eventTime",
    "userAgent",
    "requestParameters.roleSessionName",
    "userIdentity.arn",
    "userIdentity.sessionContext.sessionIssuer.userName",
    )

observables = root.without("unmapped").with("user.name", "src_endpoint.ip").( item -> { 
    "a": match {item.user.exists("name") => {"name": "user.name", "type": "User", "type_id": 4, "value": item.user.name}},
    "b": match {item.src_endpoint.exists("ip") => {"name": "src_endpoint.ip", "type": "IP Address", "type_id": 2, "value": item.src_endpoint.ip}}
    }).values()

type_uid = root.class_uid.number() * 100 + root.activity_id.number()
type_name = root.class_name + ": " + root.activity_name